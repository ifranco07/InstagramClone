// Generated by view binder compiler. Do not edit!
package com.neatroots.instagramclone.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.neatroots.instagramclone.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final RecyclerView followRv;

  @NonNull
  public final CircleImageView imageView3;

  @NonNull
  public final ImageView imageView4;

  @NonNull
  public final MaterialToolbar materialToolbar2;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final RecyclerView postRv;

  private FragmentHomeBinding(@NonNull ConstraintLayout rootView, @NonNull View divider,
      @NonNull RecyclerView followRv, @NonNull CircleImageView imageView3,
      @NonNull ImageView imageView4, @NonNull MaterialToolbar materialToolbar2,
      @NonNull NestedScrollView nestedScrollView, @NonNull RecyclerView postRv) {
    this.rootView = rootView;
    this.divider = divider;
    this.followRv = followRv;
    this.imageView3 = imageView3;
    this.imageView4 = imageView4;
    this.materialToolbar2 = materialToolbar2;
    this.nestedScrollView = nestedScrollView;
    this.postRv = postRv;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.follow_rv;
      RecyclerView followRv = ViewBindings.findChildViewById(rootView, id);
      if (followRv == null) {
        break missingId;
      }

      id = R.id.imageView3;
      CircleImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.imageView4;
      ImageView imageView4 = ViewBindings.findChildViewById(rootView, id);
      if (imageView4 == null) {
        break missingId;
      }

      id = R.id.materialToolbar2;
      MaterialToolbar materialToolbar2 = ViewBindings.findChildViewById(rootView, id);
      if (materialToolbar2 == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.post_rv;
      RecyclerView postRv = ViewBindings.findChildViewById(rootView, id);
      if (postRv == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ConstraintLayout) rootView, divider, followRv, imageView3,
          imageView4, materialToolbar2, nestedScrollView, postRv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
